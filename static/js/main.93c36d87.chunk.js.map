{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","getBase64","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","onChange","e","a","async","persist","target","files","imagedata","setState","loading","image","tf","model","tensor","fromPixels","refs","stack","dispose","predtesnor","predict","data","pred","Cardboard","Glass","Metal","Paper","Plastic","Trash","state","scanned","Navbar","bg","variant","expand","Brand","style","color","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","rel","this","alt","ref","width","height","marginBottom","src","role","fontSize","value","accept","type","maxWidth","toFixed","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93c36d87.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport * as tf from '@tensorflow/tfjs';\nimport './App.css';\n\n\n/**\n * A simple React App to for classifying recyclable garbage \n *\n * @author iberatkaya\n */\n\ninterface Props {\n\n};\n\ninterface State {\n  image: string,\n  scanned: boolean,\n  loading: boolean,\n  pred: RecycleTypes | null\n}\n\ninterface RecycleTypes {\n  Cardboard: number,\n  Glass: number,\n  Metal: number,\n  Paper: number,\n  Plastic: number,\n  Trash: number\n}\n\nclass App extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      image: '',\n      scanned: false,\n      loading: false,\n      pred: null\n    }\n  }\n\n  getBase64 = (file: File) => {\n    return new Promise(function (resolve, reject) {\n      var reader = new FileReader();\n      reader.onload = function () { resolve(reader.result); };\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n\n  onChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.persist();\n    const file = e.target.files![0]\n    const imagedata = await this.getBase64(file) as string;\n    this.setState({ loading: true, image: imagedata }, async () => {\n      const model = await tf.loadLayersModel('https://raw.githubusercontent.com/iberatkaya/recyclemodel/master/model.json');\n      //@ts-ignore\n      //@ts-ignore\n      const tensor = [tf.browser.fromPixels(this.refs.image)];\n      const stack = tf.stack(tensor);\n      tensor[0].dispose();\n      const predtesnor = model.predict(stack);\n      //@ts-ignore\n      const data = await predtesnor.data();\n      const pred = { Cardboard: data[0], Glass: data[1], Metal: data[2], Paper: data[3], Plastic: data[4], Trash: data[5] } as RecycleTypes\n      this.setState({ loading: false, pred: pred })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"info\" variant=\"dark\" expand=\"lg\">\n          <Navbar.Brand style={{ color: '#eee' }} href=\"/\">Recycle Classification</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link style={{ color: '#eee' }} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/iberatkaya\">GitHub</Nav.Link>\n              <Nav.Link style={{ color: '#eee' }} target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://linkedin.com/in/ibrahim-berat-kaya\">LinkedIn</Nav.Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-12 text-center\">\n              <h2 className=\"m-3\">Recycle Classification</h2>\n            </div>\n          </div>\n        </div>\n        <div>\n          {!this.state.loading ?\n            <div>{\n              this.state.image === '' ?\n                <div className=\"container justify-center align-items-center\">\n                  <div className=\"text-center\">\n                    <p className=\"lead\" style={{ fontSize: '1.1rem' }}>Upload your image to classify it. Images are clasified with Tensorflow.js using a custom trained model.</p>\n                  </div>\n                  <form className=\"form\">\n                    <div className=\"input-group\">\n                      <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">Upload</span>\n                      </div>\n                      <div className=\"custom-file\">\n                        <input value={this.state.image} onChange={this.onChange} accept=\"image/*\" type=\"file\" className=\"custom-file-input\" />\n                        <label className=\"custom-file-label\">Choose image</label>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n                :\n                <div className=\"container-fluid\">\n                  <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                      <div className=\"text-center\">\n                        <img alt=\"input\" ref=\"image\" style={{ maxWidth: '60%', marginBottom: '2rem' }} className=\"img-responsive\" src={this.state.image}></img>\n                      </div>\n                      <ul className=\"list-group mb-4\">\n                        <li className=\"list-group-item disabled\">CNN Predictions</li>\n                        <li className=\"list-group-item\">Cardboard - Probability: {(this.state.pred!.Cardboard * 100).toFixed(2)}%</li>\n                        <li className=\"list-group-item\">Glass - Probability: {(this.state.pred!.Glass * 100).toFixed(2)}%</li>\n                        <li className=\"list-group-item\">Metal - Probability: {(this.state.pred!.Metal * 100).toFixed(2)}%</li>\n                        <li className=\"list-group-item\">Paper - Probability: {(this.state.pred!.Paper * 100).toFixed(2)}%</li>\n                        <li className=\"list-group-item\">Plastic - Probability: {(this.state.pred!.Plastic * 100).toFixed(2)}%</li>\n                        <li className=\"list-group-item\">Trash - Probability: {(this.state.pred!.Trash * 100).toFixed(2)}%</li>\n                      </ul>\n                      <div className=\"text-center mb-2\">\n                        <button className=\"btn btn-outline-primary\" onClick={async () => {\n                          this.setState({ image: '', scanned: false })\n                        }}>Classify New Image</button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n            }\n            </div>\n            :\n            <div className=\"container text-center\">\n              <div className=\"text-center\">\n                <img alt=\"input\" ref=\"image\" style={{ width: 100, height: 100, marginBottom: '2rem' }} className=\"img-responsive\" src={this.state.image}></img>\n              </div>\n              <div className=\"spinner-border text-danger mb-3\" role=\"status\"></div>\n              <div className=\"lead\">Scanning...</div>\n            </div>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}